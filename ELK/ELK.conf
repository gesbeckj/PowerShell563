input 
{
  udp 
  {
    port => "8514"
    type => "syslog-cisco"
  }
  syslog
  {
    type => "cisco-asa"
    port => "6514"
  }
  tcp 
  {
    port => "8514"
    type => "syslog-cisco"
  }
  syslog 
  {
    type => "meraki"
    port => "7514"
  }
  lumberjack
  {
     port => 5000
     ssl_certificate => "/home/localadmin/server.crt"
     ssl_key => "/home/localadmin/server.key"
     type => "syslog-cisco"
	 codec => "json"
  }
  lumberjack
  {
     port => 5001
     ssl_certificate => "/home/localadmin/server.crt"
     ssl_key => "/home/localadmin/server.key"
     type => "cisco-asa"
	 codec => "json"
  }
  lumberjack
  {
     port => 5002
     ssl_certificate => "/home/localadmin/server.crt"
     ssl_key => "/home/localadmin/server.key"
     type => "meraki"
	 codec => "json"
  }
  
    lumberjack
  {
     port => 5003
     ssl_certificate => "/home/localadmin/server.crt"
     ssl_key => "/home/localadmin/server.key"
     type => "Firepower"
	 codec => "json"
  }
  
  
}

filter 
{
    if [type] == "syslog-cisco" 
    {
        grok 
        {

            # There are a couple of custom patterns associated with this filter.
            patterns_dir => [ "/opt/logstash/patterns" ]
            match => 
            [
            # IOS
            "message", "%{IPORHOST:sourceIP} <%{NUMBER:message_type_id}>%{NUMBER:internal_id}: %{IPORHOST:sourcehost}:%{SPACE}%{CISCOTIMESTAMPZ:cisco_timestamp}: %{GREEDYDATA:log_message}",
			"message", "<%{NUMBER:message_type_id}>%{NUMBER:Unknown_num}: %{NUMBER:internal_id}:%{SPACE}%{CISCOTIMESTAMPZ:cisco_timestamp}: %{GREEDYDATA:log_message}"
            ]
            overwrite => [ "message" ]
            add_tag => [ "cisco" ]
            remove_field => [ "syslog5424_pri", "@version" ]
        }
        if "cisco" in [tags] 
        {
            date 
            {
                match => 
                [
                    "log_date",

                    # IOS
                    "MMM dd HH:mm:ss.SSS ZZZ",
                    "MMM dd HH:mm:ss ZZZ",
                    "MMM dd HH:mm:ss.SSS",
                    
                    # Nexus
                    "YYYY MMM dd HH:mm:ss.SSS ZZZ",
                    "YYYY MMM dd HH:mm:ss ZZZ",
                    "YYYY MMM dd HH:mm:ss.SSS",
                    
                    # Hail marry
                    "ISO8601"
                ]
            }
            mutate 
            {
                gsub => 
                [
                    "severity_level", "0", "0 - Emergency",
                    "severity_level", "1", "1 - Alert",
                    "severity_level", "2", "2 - Critical",
                    "severity_level", "3", "3 - Error",
                    "severity_level", "4", "4 - Warning",
                    "severity_level", "5", "5 - Notification",
                    "severity_level", "6", "6 - Informational"
                ]
            }
        }
    }
    if [type] == "cisco-asa" 
    {
        grok 
        {
            match => ["message", "%{CISCO_TAGGED_SYSLOG} %{GREEDYDATA:cisco_message}"]
			add_tag => [ "asa" ]
        }
        # Parse the syslog severity and facility
        syslog_pri { }
        # Extract fields from the each of the detailed message types
        # The patterns provided below are included in core of LogStash 1.2.0.
        
            
   
        # Parse the date
        date 
        {
            match => ["timestamp",
            "MMM dd HH:mm:ss",
            "MMM d HH:mm:ss",
            "MMM dd yyyy HH:mm:ss",
            "MMM d yyyy HH:mm:ss"
            ]
        }
    }
    ###### End of Cisco FW #######
}


output {
  # Something went wrong with the grok parsing, don't discard the messages though
  if "_grokparsefailure" in [tags] {
    file {
      path => "/tmp/fail-%{type}-%{+YYYY.MM.dd}.log"
    }
  }

  if "cisco" in [tags] {
    elasticsearch {
      hosts => [ "127.0.0.1:9200" ]
      index           => "network-%{+YYYY.MM.dd}"
    }
  }
  if "asa" in [tags] {

    elasticsearch {
      hosts => [ "127.0.0.1:9200" ]
      index           => "firewall-%{+YYYY.MM.dd}"
    }
  }

}