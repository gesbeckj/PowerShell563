input {
  syslog {
    type => "meraki"
    port => "7514"
  }
}

filter {
    grok {
      match => ["message", "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host}  %{NUMBER:unixtimestamp} %{WORD:hostname} (?<log_type>[a-zA-Z0-9\-]+)([ ])?%{GREEDYDATA:contents}"]
      overwrite => "host"
    }
	    mutate {
      add_field => { "device_type" => "cisco-meraki" }
    }
	
	if [log_type] == "flows" {
        grok {
            match => ["contents", "(src=)%{IP:src_ip} (dst=)%{IP:dst_ip} (mac=%{MAC:src_mac})?([ ])?(protocol=)%{WORD:proto} (sport=)%{POSINT:sport} (dport=)%{POSINT:dport} (pattern: )%{WORD:allowed} %{WORD}"]
        }
        mutate {
            # for inbound flows, sometimes 0 and 1 are used for "allowed".
            #this statement will replace them
            gsub => [
                "allowed", "1", "denied",
                "allowed", "0", "allowed"
            ]
            # severity informational
            add_field => {"syslog_pri" => "6"}
        }
    }
    else if [log_type] == "ids-alerts" {
        grok {
            match => ["contents", "(?<signature>[0-9:]+) (priority=)%{POSINT:priority} (timestamp=)%{NUMBER:alert_time} (((dhost=)%{MAC:dhost})|(shost=)%{MAC:shost}) (direction=)%{WORD:direction} (protocol=)(?<protocol>[a-zA-Z/]+) (src=)%{IP:src_ip}(:)%{POSINT:sport} (dst=)%{IP:dst_ip}(:)%{POSINT:dport} (message: )(?<alert_type>[A-Z-]{5,28}) %{GREEDYDATA:alert}"]
        }
        mutate {
            #severity warning
            add_field => {"syslog_pri" => "4"}
        }
    }
    else if [log_type] == "events" {
        # events have specific patterns we need to match on things we know
        if "dhcp" in [contents] {
            grok {
                match => ["contents", "(?<event_type>dhcp)([ ])?(?<dhcp_event>no offers|release|lease)?([ ])(for)?(of ip %{IP:dhcp_lease})?([ ])?(from server mac %{MAC:server_mac})?([ ])?(for)?([ ])(client)?([ ])?(mac %{MAC:client_mac})?([ ])?(from router %{IP:router})?([ ])?(on subnet %{IP:subnet_mask})?([ ])?(with dns %{IPORHOST:dns_server})?"]
            }
            mutate {
                # severity notificational
                add_field => {"syslog_pri" => "6"}
            }
        }
        else if "route_connection_change" in [contents] {
            grok {
                match => ["contents", "(type=)%{WORD:event_type} (peer_type=')%{WORD:peer_type}(' peer=')%{MAC:peer}(' connection_status=')%{WORD:connection_status}(')"]
            }
            mutate {
                # severity warning
                add_field => {"syslog_pri" => "4"}
            }
        }
        else if "failover" in [contents] {

            mutate {
                # set the [event_type]
                add_field => {"event_type" => "failover"}

                # severity error
                add_field => {"syslog_pri" => "3"}
            }
        }
    }
    else {
        # what to do with this? find them in Kibana and make new patterns
        mutate {
            add_field => { "parsing_problem" => "unfamiliar cisco-meraki log_type." }
        }
    }
}

output {

    elasticsearch {
      hosts => [ "127.0.0.1:9200" ]
      index           => "meraki-%{+YYYY.MM.dd}"
    }
  }
