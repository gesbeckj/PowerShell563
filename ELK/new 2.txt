[2018-08-09T15:28:49,506][ERROR][logstash.agent           ]        mutate {\n                    id => \"netflow-v9-normalize-next_hop-from-ipv4_next_hop\"\n                    rename => { \"[netflow][ipv4_next_hop]\" => \"[netflow][next_hop]\" }\n                }\n            }\n        } else if [netflow][ipv6_src_addr] or [netflow][ipv6_dst_addr] or [netflow][ip_protocol_version] == 6 {\n            if [netflow][ipv6_src_addr] {\n                mutate {\n                    id => \"netflow-v9-normalize-src_addr-from-ipv6_src_addr\"\n                    rename => { \"[netflow][ipv6_src_addr]\" => \"[netflow][src_addr]\" }\n                }\n            }\n            if [netflow][ipv6_src_mask] {\n                mutate {\n                    id => \"netflow-v9-normalize-src_mask_len-from-ipv6_src_mask\"\n                    rename => { \"[netflow][ipv6_src_mask]\" => \"[netflow][src_mask_len]\" }\n                }\n            }\n            if [netflow][ipv6_dst_addr] {\n                mutate {\n                    id => \"netflow-v9-normalize-dst_addr-from-ipv6_dst_addr\"\n                    rename => { \"[netflow][ipv6_dst_addr]\" => \"[netflow][dst_addr]\" }\n                }\n            }\n            if [netflow][ipv6_dst_mask] {\n                mutate {\n                    id => \"netflow-v9-normalize-dst_mask_len-from-ipv6_dst_mask\"\n                    rename => { \"[netflow][ipv6_dst_mask]\" => \"[netflow][dst_mask_len]\" }\n                }\n            }\n            if [netflow][ipv6_next_hop] {\n                mutate {\n                    id => \"netflow-v9-normalize-next_hop-from-ipv6_next_hop\"\n                    rename => { \"[netflow][ipv6_next_hop]\" => \"[netflow][next_hop]\" }\n                }\n            }\n        } else {\n            # Did not recognize IP version.\n            mutate {\n                id => \"netflow-ip-version-not-recognized\"\n                add_tag => [ \"__netflow_ip_version_not_recognized\" ]\n            }\n        }\n        \n        # Populate flow direction (ingress/egress).\n        if [netflow][direction] == 0 {\n            mutate {\n                id => \"netflow-v9-normalize-direction-ingress\"\n                replace => { \"[netflow][direction]\" => \"ingress\" }\n            }\n        } else if [netflow][direction] == 1 {\n            mutate {\n                id => \"netflow-v9-normalize-direction-egress\"\n                replace => { \"[netflow][direction]\" => \"egress\" }\n            }\n        } else {\n            mutate {\n                id => \"netflow-v9-normalize-direction-not-recognized\"\n                add_tag => [ \"__netflow_direction_not_recognized\" ]\n            }\n        }\n\n        # Populate source port.\n        if [netflow][l4_src_port] {\n            mutate {\n                id => \"netflow-v9-normalize-src_port_from_l4_src_port\"\n                rename => { \"[netflow][l4_src_port]\" => \"[netflow][src_port]\" }\n            }\n        } else if [netflow][tcp_src_port] {\n            mutate {\n                id => \"netflow-v9-normalize-src_port_from_tcp_src_port\"\n                rename => { \"[netflow][tcp_src_port]\" => \"[netflow][src_port]\" }\n            }\n        } else if [netflow][udp_src_port] {\n            mutate {\n                id => \"netflow-v9-normalize-src_port_from_udp_src_port\"\n                rename => { \"[netflow][udp_src_port]\" => \"[netflow][src_port]\" }\n            }\n        }\n\n        # Populate destination port.\n        if [netflow][l4_dst_port] {\n            mutate {\n                id => \"netflow-v9-normalize-dst_port_from_l4_dst_port\"\n                rename => { \"[netflow][l4_dst_port]\" => \"[netflow][dst_port]\" }\n            }\n        } else if [netflow][tcp_dst_port] {\n            mutate {\n                id => \"netflow-v9-normalize-dst_port_from_tcp_dst_port\"\n                rename => { \"[netflow][tcp_dst_port]\" => \"[netflow][dst_port]\" }\n            }\n        } else if [netflow][udp_src_port] {\n            mutate {\n                id => \"netflow-v9-normalize-dst_port_from_udp_src_port\"\n                rename => { \"[netflow][udp_dst_port]\" => \"[netflow][dst_port]\" }\n            }\n        }\n\n        # Populate bytes transferred in the flow.\n        if [netflow][in_bytes] {\n            mutate {\n                id => \"netflow-v9-normalize-bytes-from-in_bytes\"\n                rename => { \"[netflow][in_bytes]\" => \"[netflow][bytes]\" }\n            }\n        } else if [netflow][out_bytes] {\n            mutate {\n                id => \"netflow-v9-normalize-bytes-from-out_bytes\"\n                rename => { \"[netflow][out_bytes]\" => \"[netflow][bytes]\" }\n            }\n        } else if [netflow][in_permanent_bytes] {\n            mutate {\n                id => \"netflow-v9-normalize-bytes-from-in_permanent_bytes\"\n                rename => { \"[netflow][in_permanent_bytes]\" => \"[netflow][bytes]\" }\n            }\n        }\n        if [netflow][bytes] {\n            mutate {\n                id => \"netflow-v9-normalize-convert-bytes\"\n                convert => { \"[netflow][bytes]\" => \"integer\" }\n            }\n        }\n        \n        # Populate packets transferred in the flow.\n        if [netflow][in_pkts] {\n            mutate {\n                id => \"netflow-v9-normalize-packets-from-in_pkts\"\n                rename => { \"[netflow][in_pkts]\" => \"[netflow][packets]\" }\n            }\n        } else if [netflow][out_pkts] {\n            mutate {\n                id => \"netflow-v9-normalize-packets-from-out_pkts\"\n                rename => { \"[netflow][out_pkts]\" => \"[netflow][packets]\" }\n            }\n        } else if [netflow][in_permanent_pkts] {\n            mutate {\n                id => \"netflow-v9-normalize-packets-from-in_permanent_pkts\"\n                rename => { \"[netflow][in_permanent_pkts]\" => \"[netflow][packets]\" }\n            }\n        }\n        if [netflow][packets] {\n            mutate {\n                id => \"netflow-v9-normalize-convert-packets\"\n                convert => { \"[netflow][packets]\" => \"integer\" }\n            }\n        }\n\n        # Populate source and destination MAC addresses if available.\n        if [netflow][in_src_mac] {\n            mutate {\n                id => \"netflow-v9-normalize-src_mac-from-in_src_mac\"\n                rename => { \"[netflow][in_src_mac]\" => \"[netflow][src_mac]\" }\n            }\n        } else if [netflow][out_src_mac] {\n            mutate {\n                id => \"netflow-v9-normalize-src_mac-from-out_src_mac\"\n                rename => { \"[netflow][out_src_mac]\" => \"[netflow][src_mac]\" }\n            }\n        }\n        if [netflow][in_dst_mac] {\n            mutate {\n                id => \"netflow-v9-normalize-dst_mac-from-in_dst_mac\"\n                rename => { \"[netflow][in_dst_mac]\" => \"[netflow][dst_mac]\" }\n            }\n        } else if [netflow][out_dst_mac] {\n            mutate {\n                id => \"netflow-v9-normalize-dst_mac-from-out_dst_mac\"\n                rename => { \"[netflow][out_dst_mac]\" => \"[netflow][dst_mac]\" }\n            }\n        }\n\n        # Populate VLAN if available.\n        if [netflow][src_vlan] {\n            mutate {\n                id => \"netflow-v9-normalize-vlan-from-src_vlan\"\n                rename => { \"[netflow][src_vlan]\" => \"[netflow][vlan]\" }\n            }\n        } else if [netflow][dst_vlan] {\n            mutate {\n                id => \"netflow-v9-normalize-vlan-from-dst_vlan\"\n                rename => { \"[netflow][dst_vlan]\" => \"[netflow][vlan]\" }\n            }\n        }\n\n        # Populate TOS if available.\n        if [netflow][src_tos] {\n            mutate {\n                id => \"netflow-v9-normalize-tos-from-src_tos\"\n                rename => { \"[netflow][src_tos]\" => \"[netflow][tos]\" }\n            }\n        }\n    }\n\n    #--------------------\n    # We now have a normalized flow record. The rest of the logic works\n    # regardless of the Netflow version.\n    #--------------------\n\n    # Replace protocol ID with well-known name.\n    if [netflow][protocol] {\n        translate {\n            id => \"netflow-postproc-translate-protocol_name\"\n            dictionary_path => \"<%= ::File.join(LogStash::Environment::LOGSTASH_HOME, \"", :backtrace=>["/usr/share/logstash/logstash-core/lib/logstash/compiler.rb:42:in `compile_imperative'", "/usr/share/logstash/logstash-core/lib/logstash/compiler.rb:50:in `compile_graph'", "/usr/share/logstash/logstash-core/lib/logstash/compiler.rb:12:in `block in compile_sources'", "org/jruby/RubyArray.java:2486:in `map'", "/usr/share/logstash/logstash-core/lib/logstash/compiler.rb:11:in `compile_sources'", "/usr/share/logstash/logstash-core/lib/logstash/pipeline.rb:51:in `initialize'", "/usr/share/logstash/logstash-core/lib/logstash/pipeline.rb:169:in `initialize'", "/usr/share/logstash/logstash-core/lib/logstash/pipeline_action/create.rb:40:in `execute'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:315:in `block in converge_state'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:141:in `with_pipelines'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:312:in `block in converge_state'", "org/jruby/RubyArray.java:1734:in `each'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:299:in `converge_state'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:166:in `block in converge_state_and_update'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:141:in `with_pipelines'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:164:in `converge_state_and_update'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:90:in `execute'", "/usr/share/logstash/logstash-core/lib/logstash/runner.rb:348:in `block in execute'", "/usr/share/logstash/vendor/bundle/jruby/2.3.0/gems/stud-0.0.23/lib/stud/task.rb:24:in `block in initialize'"]}
[2018-08-09T15:29:05,267][INFO ][logstash.modules.scaffold] Initializing module {:module_name=>"netflow", :directory=>"/usr/share/logstash/modules/netflow/configuration"}
[2018-08-09T15:29:05,274][INFO ][logstash.modules.scaffold] Initializing module {:module_name=>"fb_apache", :directory=>"/usr/share/logstash/modules/fb_apache/configuration"}
[2018-08-09T15:29:05,705][INFO ][logstash.runner          ] Starting Logstash {"logstash.version"=>"6.2.4"}
[2018-08-09T15:29:05,795][INFO ][logstash.agent           ] Successfully started Logstash API endpoint {:port=>9600}
[2018-08-09T15:29:06,445][ERROR][logstash.agent           ]        mutate {\n                    id => \"netflow-v9-normalize-next_hop-from-ipv4_next_hop\"\n                    rename => { \"[netflow][ipv4_next_hop]\" => \"[netflow][next_hop]\" }\n                }\n            }\n        } else if [netflow][ipv6_src_addr] or [netflow][ipv6_dst_addr] or [netflow][ip_protocol_version] == 6 {\n            if [netflow][ipv6_src_addr] {\n                mutate {\n                    id => \"netflow-v9-normalize-src_addr-from-ipv6_src_addr\"\n                    rename => { \"[netflow][ipv6_src_addr]\" => \"[netflow][src_addr]\" }\n                }\n            }\n            if [netflow][ipv6_src_mask] {\n                mutate {\n                    id => \"netflow-v9-normalize-src_mask_len-from-ipv6_src_mask\"\n                    rename => { \"[netflow][ipv6_src_mask]\" => \"[netflow][src_mask_len]\" }\n                }\n            }\n            if [netflow][ipv6_dst_addr] {\n                mutate {\n                    id => \"netflow-v9-normalize-dst_addr-from-ipv6_dst_addr\"\n                    rename => { \"[netflow][ipv6_dst_addr]\" => \"[netflow][dst_addr]\" }\n                }\n            }\n            if [netflow][ipv6_dst_mask] {\n                mutate {\n                    id => \"netflow-v9-normalize-dst_mask_len-from-ipv6_dst_mask\"\n                    rename => { \"[netflow][ipv6_dst_mask]\" => \"[netflow][dst_mask_len]\" }\n                }\n            }\n            if [netflow][ipv6_next_hop] {\n                mutate {\n                    id => \"netflow-v9-normalize-next_hop-from-ipv6_next_hop\"\n                    rename => { \"[netflow][ipv6_next_hop]\" => \"[netflow][next_hop]\" }\n                }\n            }\n        } else {\n            # Did not recognize IP version.\n            mutate {\n                id => \"netflow-ip-version-not-recognized\"\n                add_tag => [ \"__netflow_ip_version_not_recognized\" ]\n            }\n        }\n        \n        # Populate flow direction (ingress/egress).\n        if [netflow][direction] == 0 {\n            mutate {\n                id => \"netflow-v9-normalize-direction-ingress\"\n                replace => { \"[netflow][direction]\" => \"ingress\" }\n            }\n        } else if [netflow][direction] == 1 {\n            mutate {\n                id => \"netflow-v9-normalize-direction-egress\"\n                replace => { \"[netflow][direction]\" => \"egress\" }\n            }\n        } else {\n            mutate {\n                id => \"netflow-v9-normalize-direction-not-recognized\"\n                add_tag => [ \"__netflow_direction_not_recognized\" ]\n            }\n        }\n\n        # Populate source port.\n        if [netflow][l4_src_port] {\n            mutate {\n                id => \"netflow-v9-normalize-src_port_from_l4_src_port\"\n                rename => { \"[netflow][l4_src_port]\" => \"[netflow][src_port]\" }\n            }\n        } else if [netflow][tcp_src_port] {\n            mutate {\n                id => \"netflow-v9-normalize-src_port_from_tcp_src_port\"\n                rename => { \"[netflow][tcp_src_port]\" => \"[netflow][src_port]\" }\n            }\n        } else if [netflow][udp_src_port] {\n            mutate {\n                id => \"netflow-v9-normalize-src_port_from_udp_src_port\"\n                rename => { \"[netflow][udp_src_port]\" => \"[netflow][src_port]\" }\n            }\n        }\n\n        # Populate destination port.\n        if [netflow][l4_dst_port] {\n            mutate {\n                id => \"netflow-v9-normalize-dst_port_from_l4_dst_port\"\n                rename => { \"[netflow][l4_dst_port]\" => \"[netflow][dst_port]\" }\n            }\n        } else if [netflow][tcp_dst_port] {\n            mutate {\n                id => \"netflow-v9-normalize-dst_port_from_tcp_dst_port\"\n                rename => { \"[netflow][tcp_dst_port]\" => \"[netflow][dst_port]\" }\n            }\n        } else if [netflow][udp_src_port] {\n            mutate {\n                id => \"netflow-v9-normalize-dst_port_from_udp_src_port\"\n                rename => { \"[netflow][udp_dst_port]\" => \"[netflow][dst_port]\" }\n            }\n        }\n\n        # Populate bytes transferred in the flow.\n        if [netflow][in_bytes] {\n            mutate {\n                id => \"netflow-v9-normalize-bytes-from-in_bytes\"\n                rename => { \"[netflow][in_bytes]\" => \"[netflow][bytes]\" }\n            }\n        } else if [netflow][out_bytes] {\n            mutate {\n                id => \"netflow-v9-normalize-bytes-from-out_bytes\"\n                rename => { \"[netflow][out_bytes]\" => \"[netflow][bytes]\" }\n            }\n        } else if [netflow][in_permanent_bytes] {\n            mutate {\n                id => \"netflow-v9-normalize-bytes-from-in_permanent_bytes\"\n                rename => { \"[netflow][in_permanent_bytes]\" => \"[netflow][bytes]\" }\n            }\n        }\n        if [netflow][bytes] {\n            mutate {\n                id => \"netflow-v9-normalize-convert-bytes\"\n                convert => { \"[netflow][bytes]\" => \"integer\" }\n            }\n        }\n        \n        # Populate packets transferred in the flow.\n        if [netflow][in_pkts] {\n            mutate {\n                id => \"netflow-v9-normalize-packets-from-in_pkts\"\n                rename => { \"[netflow][in_pkts]\" => \"[netflow][packets]\" }\n            }\n        } else if [netflow][out_pkts] {\n            mutate {\n                id => \"netflow-v9-normalize-packets-from-out_pkts\"\n                rename => { \"[netflow][out_pkts]\" => \"[netflow][packets]\" }\n            }\n        } else if [netflow][in_permanent_pkts] {\n            mutate {\n                id => \"netflow-v9-normalize-packets-from-in_permanent_pkts\"\n                rename => { \"[netflow][in_permanent_pkts]\" => \"[netflow][packets]\" }\n            }\n        }\n        if [netflow][packets] {\n            mutate {\n                id => \"netflow-v9-normalize-convert-packets\"\n                convert => { \"[netflow][packets]\" => \"integer\" }\n            }\n        }\n\n        # Populate source and destination MAC addresses if available.\n        if [netflow][in_src_mac] {\n            mutate {\n                id => \"netflow-v9-normalize-src_mac-from-in_src_mac\"\n                rename => { \"[netflow][in_src_mac]\" => \"[netflow][src_mac]\" }\n            }\n        } else if [netflow][out_src_mac] {\n            mutate {\n                id => \"netflow-v9-normalize-src_mac-from-out_src_mac\"\n                rename => { \"[netflow][out_src_mac]\" => \"[netflow][src_mac]\" }\n            }\n        }\n        if [netflow][in_dst_mac] {\n            mutate {\n                id => \"netflow-v9-normalize-dst_mac-from-in_dst_mac\"\n                rename => { \"[netflow][in_dst_mac]\" => \"[netflow][dst_mac]\" }\n            }\n        } else if [netflow][out_dst_mac] {\n            mutate {\n                id => \"netflow-v9-normalize-dst_mac-from-out_dst_mac\"\n                rename => { \"[netflow][out_dst_mac]\" => \"[netflow][dst_mac]\" }\n            }\n        }\n\n        # Populate VLAN if available.\n        if [netflow][src_vlan] {\n            mutate {\n                id => \"netflow-v9-normalize-vlan-from-src_vlan\"\n                rename => { \"[netflow][src_vlan]\" => \"[netflow][vlan]\" }\n            }\n        } else if [netflow][dst_vlan] {\n            mutate {\n                id => \"netflow-v9-normalize-vlan-from-dst_vlan\"\n                rename => { \"[netflow][dst_vlan]\" => \"[netflow][vlan]\" }\n            }\n        }\n\n        # Populate TOS if available.\n        if [netflow][src_tos] {\n            mutate {\n                id => \"netflow-v9-normalize-tos-from-src_tos\"\n                rename => { \"[netflow][src_tos]\" => \"[netflow][tos]\" }\n            }\n        }\n    }\n\n    #--------------------\n    # We now have a normalized flow record. The rest of the logic works\n    # regardless of the Netflow version.\n    #--------------------\n\n    # Replace protocol ID with well-known name.\n    if [netflow][protocol] {\n        translate {\n            id => \"netflow-postproc-translate-protocol_name\"\n            dictionary_path => \"<%= ::File.join(LogStash::Environment::LOGSTASH_HOME, \"", :backtrace=>["/usr/share/logstash/logstash-core/lib/logstash/compiler.rb:42:in `compile_imperative'", "/usr/share/logstash/logstash-core/lib/logstash/compiler.rb:50:in `compile_graph'", "/usr/share/logstash/logstash-core/lib/logstash/compiler.rb:12:in `block in compile_sources'", "org/jruby/RubyArray.java:2486:in `map'", "/usr/share/logstash/logstash-core/lib/logstash/compiler.rb:11:in `compile_sources'", "/usr/share/logstash/logstash-core/lib/logstash/pipeline.rb:51:in `initialize'", "/usr/share/logstash/logstash-core/lib/logstash/pipeline.rb:169:in `initialize'", "/usr/share/logstash/logstash-core/lib/logstash/pipeline_action/create.rb:40:in `execute'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:315:in `block in converge_state'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:141:in `with_pipelines'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:312:in `block in converge_state'", "org/jruby/RubyArray.java:1734:in `each'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:299:in `converge_state'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:166:in `block in converge_state_and_update'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:141:in `with_pipelines'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:164:in `converge_state_and_update'", "/usr/share/logstash/logstash-core/lib/logstash/agent.rb:90:in `execute'", "/usr/share/logstash/logstash-core/lib/logstash/runner.rb:348:in `block in execute'", "/usr/share/logstash/vendor/bundle/jruby/2.3.0/gems/stud-0.0.23/lib/stud/task.rb:24:in `block in initialize'"]}
localadmin@ELK:/var/log/logstash$
